from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ChatMemberMember, ChatMemberAdministrator, ChatMemberOwner
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.utils.deep_linking import create_start_link, decode_payload
from aiogram.filters import Filter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state


from config_data.config import Config, load_config
from database.requests import add_user, get_balance, get_referral_users, get_referral_link, \
    add_referral_user, _get_username_from_id, get_user_from_id, increase_ton_balance
from keyboards.keyboard_user import keyboards_subscription, keyboards_main, yes_or_no, on_work, confirm
from crypto.CryptoHelper import pay_ton_to, CodeErrorFactory
from services.googlesheets import get_list_all_anketa, append_anketa, update_status_anketa

import logging
import asyncio

router = Router()
user_dict = {}
config: Config = load_config()


class ChannelProtect(Filter):
    async def __call__(self, message: Message, bot: Bot):
        u_status = await bot.get_chat_member(chat_id=load_config().tg_bot.channel_name, user_id=message.from_user.id)
        if isinstance(u_status, ChatMemberMember) or isinstance(u_status, ChatMemberAdministrator) \
                or isinstance(u_status, ChatMemberOwner):
            return True
        if isinstance(message, CallbackQuery):
            await message.answer('')
            await message.message.answer(text=f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ —Å–∞–º–æ–º—É'
                                              f' –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é —Å–≤–æ–µ–π –º–µ—á—Ç—ã –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª '
                                              f'<a href="{config.tg_bot.channel_name}">'
                                              f'{config.tg_bot.channel_name}</a>',
                                         reply_markup=keyboards_subscription(),
                                         parse_mode='html')
        else:
            await message.answer(text=f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ —Å–∞–º–æ–º—É –Ω–∞–π—Ç–∏'
                                      f' –≤–∞–∫–∞–Ω—Å–∏—é —Å–≤–æ–µ–π –º–µ—á—Ç—ã –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª'
                                      f'<a href="{config.tg_bot.channel_name}">{config.tg_bot.channel_name}</a>',
                                 reply_markup=keyboards_subscription(),
                                 parse_mode='html')
        return False


@router.message(ChannelProtect(), CommandStart())
async def process_start_command_user(message: Message, command: CommandObject, bot: Bot) -> None:
    logging.info("process_start_command_user")
    args = command.args
    if args:
        referrer_id = int(decode_payload(args))
        print(referrer_id)
        if not await get_user_from_id(user_id=message.from_user.id):
            await add_referral_user(main_user_id=referrer_id, referral_user_id=message.from_user.id)
            #
            # try:
            #     tr = await pay_ton_to(referrer_id, 0.15)
            #     if tr.status == 'completed':
            #         await bot.send_message(chat_id=referrer_id,
            #                                text=f'üí∏ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –ø–µ—Ä–µ—à–µ–ª @{message.from_user.username},'
            #                                     f' –≤–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ 0.15 TON \n@CryptoBot')
            #     else:
            #         for admin_id in config.tg_bot.admin_ids.split(','):
            #             await bot.send_message(chat_id=admin_id,
            #                                    text=f'‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
            #                                         f' {await _get_username_from_id(referrer_id)} –Ω–µ –ø—Ä–∏—à–ª–æ 0.15 TON'
            #                                         f' –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ @{message.from_user.username}')
            #
            # except Exception as e:
            #     logging.error(e)
            #     for admin_id in config.tg_bot.admin_ids.split(','):
            #         await bot.send_message(chat_id=admin_id,
            #                                text=f'‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
            #                                     f' {await _get_username_from_id(referrer_id)} –Ω–µ –ø—Ä–∏—à–ª–æ 0.15 TON'
            #                                     f' –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ @{message.from_user.username}')

            link = await create_start_link(bot=bot, payload=str(message.from_user.id), encode=True)
            await add_user({"id": message.from_user.id, "username": message.from_user.username, "referral_link": link,
                            "referer_id": referrer_id})
            await user_subscription(message)
        else:
            user = await get_user_from_id(user_id=message.chat.id)
            if user.referer_id != referrer_id:
                await message.answer('–í–∞—Å –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫!')
            await user_subscription(message)
    else:
        link = await create_start_link(bot=bot, payload=str(message.from_user.id), encode=True)
        await add_user({"id": message.from_user.id, "username": message.from_user.username, "referral_link": link})
        await user_subscription(message)


@router.callback_query(ChannelProtect(), F.data == 'subscription')
async def process_press_subscription(callback: CallbackQuery):
    logging.info(f'process_press_subscription: {callback.message.chat.id}')
    await callback.answer('')
    await user_subscription(message=callback)


async def user_subscription(message: Message | CallbackQuery):
    logging.info(f'user_subscription: {message.from_user.id}')
    if isinstance(message, Message):
        await message.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã\n'
                                  f'–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç ....',
                             reply_markup=keyboards_main())
    else:
        await message.message.answer(text=f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üëã\n'
                                          f'–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç ....',
                                     reply_markup=keyboards_main())


@router.message(F.text == '–ë–∞–ª–∞–Ω—Å')
async def get_user_balance(message: Message):
    logging.info(f'get_user_balance: {message.from_user.id}')
    balance_user = await get_balance(message.from_user.id)
    await message.answer(text=f'–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:\n'
                              f'{balance_user} TON')


@router.message(F.text == '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞')
async def get_link_ref(message: Message):
    logging.info(f'get_link_referal: {message.chat.id}')
    link = await get_referral_link(message.from_user.id)
    await message.answer(text=f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
                              f'{link}')


@router.message(F.text == '–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
async def get_list_referrals(message: Message):
    logging.info(f'get_list_user_referal: {message.chat.id}')

    msg = await get_referral_users(message.from_user.id)
    if msg:
        print(msg)
        if len(msg) > 4096:
            for x in range(0, len(msg), 4096):
                await message.answer(msg[x:x + 4096])
                await asyncio.sleep(0.2)
        else:
            await message.answer(msg)
    else:
        await message.answer(text='–í –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç!')


class UserAnketa(StatesGroup):
    Anketa = State()
    confirm = State()
    id = State()


@router.message(Command('cancel'))
async def cancel(message: Message, state: FSMContext):
    await message.answer('–û—Ç–º–µ–Ω–∞')
    await state.clear()


@router.message(F.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é')
async def make_anketa(message: Message, state: FSMContext):
    logging.info(f'make_anketa: {message.from_user.id}')
    await state.set_state(UserAnketa.Anketa)
    await message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞!\n\n/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã')


@router.message(UserAnketa.Anketa)
async def get_anketa(message: Message, state: FSMContext):
    logging.info(f'get_anketa: {message.from_user.id}')
    await state.update_data(anketa=message.text)
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?', reply_markup=yes_or_no())


@router.callback_query(F.data.startswith("linkanketa"))
async def confirm_anketa(callback: CallbackQuery, state: FSMContext, bot: Bot):
    logging.info(f'confirm_anketa: {callback.message.from_user.id}')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    answer = callback.data.split('_')[1]
    if answer == 'confirm':
        msg = await callback.message.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã...')
        id_anketa = len(get_list_all_anketa())
        await state.update_data(id_anketa=id_anketa)
        user_dict[callback.message.chat.id] = await state.get_data()
        anketa = user_dict[callback.message.chat.id]['anketa']
        user = await get_user_from_id(user_id=callback.message.chat.id)
        if user.referer_id != 0:
            referer = await get_user_from_id(user_id=user.referer_id)
            id_telegram_referer = user.referer_id
            username_referer = referer.username
        else:
            id_telegram_referer = 0
            username_referer = 'none'
        append_anketa(id_anketa=id_anketa,
                      id_telegram_refer=callback.message.chat.id,
                      username_refer=callback.from_user.username,
                      id_telegram_referer=id_telegram_referer,
                      username_referer=username_referer,
                      link_post=anketa,
                      status="‚ö†Ô∏è")
        await asyncio.sleep(3)
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=msg.message_id)
        await callback.answer(text='–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
                              show_alert=True)
        await callback.message.answer(text='–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ TON –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É. \n\n'
                                           '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∏ –ø–æ–ª—É—á–∞—Ç—å TON –∑–∞'
                                           ' –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        await callback.message.answer(text='–î–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É'
                                           ' "–•–æ—á—É TON"',
                                      reply_markup=on_work(id_anketa=id_anketa))
        await state.set_state(default_state)
    else:
        await callback.message.answer(text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∞–Ω–∫–µ—Ç—ã',
                                      reply_markup=keyboards_main())
        await state.set_state(default_state)
    await callback.answer()


async def confirm_complete(bot: Bot, message: Message):
    for admin_id in config.tg_bot.admin_ids.split(','):
        try:
            await bot.send_message(chat_id=int(admin_id),
                                   text=f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{message.from_user.username}!',
                                   reply_markup=confirm(message.from_user.id))
        except:
            pass


@router.callback_query(F.data.startswith('wishton_'))
async def want_ton(callback: CallbackQuery, state: FSMContext, bot: Bot):
    await callback.answer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ'
                               ' –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ!',
                          show_alert=True)
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    user_dict[callback.message.chat.id] = await state.get_data()
    anketa = user_dict[callback.message.chat.id]['anketa']
    id_anketa = user_dict[callback.message.chat.id]['id_anketa']
    # username = callback.from_user.username
    for admin_id in config.tg_bot.admin_ids.split(','):
        try:
            await bot.send_message(chat_id=int(admin_id),
                                   text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username}, –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏–π—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:\n'
                                        f' {anketa},'
                                        f' –≤—ã—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É.\n'
                                        f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ —Å—Ç—Ä–æ–∫–∞ ‚Ññ {id_anketa}')
            await bot.send_message(chat_id=int(admin_id),
                                   text=f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{callback.from_user.username}!',
                                   reply_markup=confirm(callback.message.chat.id))
        except:
            pass
    await state.set_state(default_state)
    await callback.answer()


@router.callback_query(F.data.startswith('confirm_pay_'))
async def transfer_pay_to(callback: CallbackQuery, bot: Bot, state: FSMContext):
    logging.info(f'transfer_pay_to: {callback.data.split("_")[-1]}')
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    user_to_pay = int(callback.data.split('_')[-1])
    update_status_anketa(status='‚úÖ', telegram_id=user_to_pay)
    try:
        tr = await pay_ton_to(user_to_pay, 0.15)
        await increase_ton_balance(tg_id=user_to_pay, s=0.15)
        if tr.status == 'completed':
            await callback.message.answer(
                f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{await _get_username_from_id(user_to_pay)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <strong>0.15 TON</strong>',
                parse_mode='html')
            try:
                await bot.send_message(chat_id=user_to_pay,
                                       text='–í–∞–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ 0.15 TON\n\n'
                                            '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ @CryptoBot')
            except:
                pass
            update_status_anketa(status='üí∞', telegram_id=user_to_pay)
        else:
            for admin_id in config.tg_bot.admin_ids.split(','):
                try:
                    await bot.send_message(chat_id=int(admin_id),
                                           text=f'‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
                                                f' {await _get_username_from_id(user_to_pay)} –Ω–µ –ø—Ä–∏—à–ª–æ 0.15 TON,'
                                                f' –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—à–µ–ª–µ–∫, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–∞–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
                except:
                    pass

    except Exception as e:
        err = CodeErrorFactory(400)
        # logging.info([err.args, e.args])
        if e.args[0] == err.args[0]:
            for admin_id in config.tg_bot.admin_ids.split(','):
                try:
                    await bot.send_message(chat_id=int(admin_id),
                                           text=f'‚ùóÔ∏è–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
                                                f' @{await _get_username_from_id(user_to_pay)} –Ω–µ –ø—Ä–∏—à–ª–æ 0.15 TON'
                                                f' –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞')
                except:
                    pass
    await callback.answer()


@router.callback_query(F.data.startswith('cancel_pay_'))
async def cancel_pay(callback: CallbackQuery, bot: Bot, state: FSMContext):
    logging.info(f'cancel_pay: {callback.data.split("_")[-1]}')
    await callback.answer('')
    user_to_pay = int(callback.data.split('_')[-1])
    await callback.message.answer(text=f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{await _get_username_from_id(user_to_pay)} –æ–ø–ª–∞—Ç–∞'
                                       f' –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
                                  parse_mode='html')
    try:
        await bot.send_message(chat_id=user_to_pay,
                               text='–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π')
    except:
        pass
    update_status_anketa(status='‚ùå', telegram_id=user_to_pay)
    await callback.answer()