from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, ChatMemberMember, ChatMemberAdministrator, ChatMemberOwner,\
    LinkPreviewOptions, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command, CommandObject, or_f
from aiogram.utils.deep_linking import create_start_link, decode_payload
from aiogram.filters import Filter, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup, default_state


from config_data.config import Config, load_config
from database.requests import add_user, get_balance, get_referral_users, get_referral_link, \
    add_referral_user, _get_username_from_id, get_user_from_id, increase_ton_balance, update_status, UserStatus,\
    get_user_ton_addr_by_id, update_user_ton_addr
from keyboards.keyboard_user import keyboards_subscription, keyboards_main, yes_or_no, on_work, confirm, yes_or_no_addr,\
    pass_the_state, keyboards_get_contact, keyboard_confirm_phone, keyboard_cancel, keyboard_vacancy, \
    keyboard_confirm_cantact_date

from TonCrypto.contract.CryptoHelper import TonWallet, check_valid_addr, get_ton_in_rub

from services.googlesheets import get_list_all_anketa, append_anketa, update_status_anketa, get_list_anketa, \
    get_info_user
from datetime import datetime
import logging
import asyncio
import re

router = Router()
user_dict = {}
config: Config = load_config()


def validate_russian_phone_number(phone_number):
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    # –†–æ—Å—Å–∏–π—Å–∫–∏–µ –Ω–æ–º–µ—Ä–∞ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7, 8, –∏–ª–∏ –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã
    pattern = re.compile(r'^(\+7|8|7)?(\d{10})$')

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω—É
    match = pattern.match(phone_number)

    return bool(match)


class ChannelProtect(Filter):
    async def __call__(self, message: Message, bot: Bot):
        u_status = await bot.get_chat_member(chat_id=load_config().tg_bot.channel_name, user_id=message.from_user.id)
        if isinstance(u_status, ChatMemberMember) or isinstance(u_status, ChatMemberAdministrator) \
                or isinstance(u_status, ChatMemberOwner):
            return True
        if isinstance(message, CallbackQuery):
            await message.answer('')
            await message.message.answer(text=f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ —Å–∞–º–æ–º—É'
                                              f' –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏—é —Å–≤–æ–µ–π –º–µ—á—Ç—ã –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª '
                                              f'<a href="{config.tg_bot.channel_name}">'
                                              f'{config.tg_bot.channel_name}</a>',
                                         reply_markup=keyboards_subscription(),
                                         parse_mode='html')
        else:
            await message.answer(text=f'–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞ —Å–∞–º–æ–º—É –Ω–∞–π—Ç–∏'
                                      f' –≤–∞–∫–∞–Ω—Å–∏—é —Å–≤–æ–µ–π –º–µ—á—Ç—ã –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª '
                                      f'<a href="{config.tg_bot.channel_name}">{config.tg_bot.channel_name}</a>',
                                 reply_markup=keyboards_subscription(),
                                 parse_mode='html')
        return False


@router.message(ChannelProtect(), CommandStart())
async def process_start_command_user(message: Message, command: CommandObject, bot: Bot, state: FSMContext) -> None:
    """
    –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–≤–≤–æ–¥ –∫–æ–º–∞–Ω–¥—ã /start) –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
    """
    logging.info("process_start_command_user")
    await state.set_state(default_state)
    args = command.args
    if args:
        referrer_id = int(decode_payload(args))

        if not await get_user_from_id(user_id=message.from_user.id):
            await add_referral_user(main_user_id=referrer_id, referral_user_id=message.from_user.id)

            link = await create_start_link(bot=bot, payload=str(message.from_user.id), encode=True)
            if message.from_user.username:
                await add_user(
                    {"id": message.from_user.id, "username": message.from_user.username, "referral_link": link,
                     "referer_id": referrer_id})
            else:
                await add_user(
                    {"id": message.from_user.id, "username": f"None-{message.from_user.id}", "referral_link": link,
                     "referer_id": referrer_id})
            await user_subscription(message)
        else:
            user = await get_user_from_id(user_id=message.chat.id)
            if user.referer_id != referrer_id:
                await message.answer('–í–∞—Å –º–æ–∂–µ—Ç –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫!')
            await user_subscription(message)
    else:
        link = await create_start_link(bot=bot, payload=str(message.from_user.id), encode=True)
        if message.from_user.username:
            await add_user({"id": message.from_user.id, "username": message.from_user.username, "referral_link": link,
                            "status": 'None'})
        else:
            await add_user({"id": message.from_user.id, "username": f"None-{message.from_user.id}",
                            "referral_link": link, "status": 'None'})
        await user_subscription(message)


@router.callback_query(ChannelProtect(), F.data == 'subscription')
async def process_press_subscription(callback: CallbackQuery, bot: Bot):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É, —á—Ç–æ –æ–Ω –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    logging.info(f'process_press_subscription: {callback.message.chat.id}')
    link = await create_start_link(bot=bot, payload=str(callback.from_user.id), encode=True)
    if callback.from_user.username:
        await add_user(
            {"id": callback.from_user.id, "username": callback.from_user.username, "referral_link": link})
    else:
        await add_user(
            {"id": callback.from_user.id, "username": f"None-{callback.from_user.id}", "referral_link": link})
    await callback.answer('')
    await user_subscription(message=callback)


async def user_subscription(message: Message | CallbackQuery):
    """
    –ú–µ–Ω—é –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    logging.info(f'user_subscription: {message.from_user.id}')
    if isinstance(message, Message):
        await message.answer_photo(
            photo='AgACAgIAAxkBAAIG2mZ0W586nnqgd8vmaszoV-6YWiMzAAKj2zEbeLygS5B-4alYFVH_AQADAgADeAADNQQ',
            caption=f'–ü—Ä–∏–≤–µ—Ç! üëã\n'
                    f'–≠—Ç–æ –±–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n\n'
                    f'–¢—É—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n'
                    f'‚úÖ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é;\n'
                    f'‚úÖ—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ –Ω–µ–π –¥—Ä—É–≥–∞;\n'
                    f'‚úÖ—É–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å;\n'
                    f'‚úÖ–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π.',
            reply_markup=keyboards_main()
        )
    else:
        await message.answer_photo(
            photo='AgACAgIAAxkBAAIG2mZ0W586nnqgd8vmaszoV-6YWiMzAAKj2zEbeLygS5B-4alYFVH_AQADAgADeAADNQQ',
            caption=f'–ü—Ä–∏–≤–µ—Ç! üëã\n'
                    f'–≠—Ç–æ –±–æ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã.\n\n'
                    f'–¢—É—Ç –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n'
                    f'‚úÖ–∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é;\n'
                    f'‚úÖ—Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ –Ω–µ–π –¥—Ä—É–≥–∞;\n'
                    f'‚úÖ—É–∑–Ω–∞—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å;\n'
                    f'‚úÖ–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ª—é–¥–µ–π.',
            reply_markup=keyboards_main()
        )


@router.message(F.text == '–ë–∞–ª–∞–Ω—Å')
async def get_user_balance(message: Message):
    """
    –í—ã–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞
    """
    logging.info(f'get_user_balance: {message.from_user.id}')
    balance_user = await get_balance(message.from_user.id)
    await message.answer(text=f'–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:\n'
                              f'{balance_user} TON')


@router.message(F.text == '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–∞')
async def get_link_ref(message: Message):
    """
    –í—ã–≤–æ–¥ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    logging.info(f'get_link_referal: {message.chat.id}')
    link = await get_referral_link(message.from_user.id)
    await message.answer(text=f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n'
                              f'{link}')


@router.message(F.text == '–°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤')
async def get_list_referrals(message: Message):
    """
    –°–ø–∏—Å–æ–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    """
    logging.info(f'get_list_user_referal: {message.chat.id}')

    msg = await get_referral_users(message.from_user.id)
    if msg:
        print(msg)
        if len(msg) > 4096:
            for x in range(0, len(msg), 4096):
                await message.answer(msg[x:x + 4096])
                await asyncio.sleep(0.2)
        else:
            await message.answer(msg)
    else:
        await message.answer(text='–í –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç!')


class UserAnketa(StatesGroup):
    Anketa = State()
    username = State()
    phone = State()
    city = State()
    email = State()
    address = State()
    confirm_addr = State()
    confirm = State()
    id = State()


@router.message(Command('cancel'))
async def cancel(message: Message, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
    """
    await message.answer(text='–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                         reply_markup=keyboards_main())
    await state.clear()


@router.callback_query(F.data == '/cancel')
async def cancel_cq(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è
    """
    logging.info(f'cancel_cq: {callback.message.from_user.id}')
    await callback.message.answer(text='–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                                  reply_markup=keyboards_main())
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    await state.clear()


@router.message(F.text == '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é')
async def make_anketa(message: Message, state: FSMContext):
    """–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é' """
    logging.info(f'make_anketa: {message.from_user.id}')
    # !!! –ó–î–ï–°–¨ –°–õ–ï–î–£–ï–¢ –î–û–ë–ê–í–ò–¢–¨ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ù–ê –†–ê–ù–ï–ï –í–í–ï–î–ï–ù–ù–´–ï –î–ê–ù–ù–´–ï (–ò–ú–Ø, –ù–û–ú–ï–† –¢–ï–õ–ï–§–û–ù–ê, –ì–û–†–û–î, EMAIL, –ê–î–†–ï–° –ö–û–®–ï–õ–¨–ö–ê)
    if get_info_user(id_telegram=message.chat.id):
        dict_info_user = get_info_user(id_telegram=message.chat.id)
        address_wallet = await get_user_ton_addr_by_id(user_id=message.chat.id)
        if address_wallet == None:
            wallet = '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∞'
        else:
            wallet = address_wallet
        await message.answer(text=f'–†–∞–¥ –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å {dict_info_user["name"]}\n'
                                  f'<i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i> {dict_info_user["phone"]}\n'
                                  f'<i>–ì–æ—Ä–æ–¥:</i> {dict_info_user["city"]}\n'
                                  f'<i>Email:</i> {dict_info_user["email"]}\n'
                                  f'<i>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:</i> {wallet}\n\n'
                                  f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –µ—Å–ª–∏ –æ–Ω–∏ –≤–µ—Ä–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "–í–µ—Ä–Ω–æ",'
                                  f' –∏–Ω–∞—á–µ "–ò–∑–º–µ–Ω–∏—Ç—å"',
                             reply_markup=keyboard_confirm_cantact_date(),
                             parse_mode='html')
    else:
        await message.answer(text='–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?')
        await state.set_state(UserAnketa.username)


@router.callback_query(F.data.startswith('data_'))
async def confirm_change_data(callback: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    logging.info(f'confirm_change_data: {callback.message.from_user.id}')
    answer = callback.data.split('_')[1]
    if answer == 'confirm':
        dict_info_user = get_info_user(id_telegram=callback.message.chat.id)
        await state.update_data(name=dict_info_user['name'])
        await state.update_data(phone=dict_info_user['phone'])
        await state.update_data(city=dict_info_user['city'])
        await state.update_data(email=dict_info_user['email'])
        await callback.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ @shoptalkrn',
                                      reply_markup=keyboard_cancel())
        await state.set_state(UserAnketa.Anketa)
    elif answer == 'change':
        await callback.message.edit_text(text='–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?',
                                         reply_markup=None)
        await state.set_state(UserAnketa.username)


@router.message(F.text, UserAnketa.username)
async def anketa_get_username(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    logging.info(f'anketa_get_username: {message.from_user.id}')
    name = message.text
    await state.update_data(name=name)
    await message.answer(text=f'–†–∞–¥ –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å {name}. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è',
                         reply_markup=keyboards_get_contact())
    await state.set_state(UserAnketa.phone)


@router.message(or_f(F.text, F.contact), StateFilter(UserAnketa.phone))
async def process_validate_russian_phone_number(message: Message, state: FSMContext) -> None:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–æ–≤–æ–¥–∏–º –µ–≥–æ –≤–∞–ª–∏–¥–∞—Ü–∏—é). –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    logging.info("process_start_command_user")
    if message.contact:
        phone = str(message.contact.phone_number)
    else:
        phone = message.text
        if not validate_russian_phone_number(phone):
            await message.answer(text="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥, –Ω–∞–ø—Ä–∏–º–µ—Ä 89991112222:")
            return
    await state.update_data(phone=phone)
    await state.set_state(default_state)
    await message.answer(text=f'–ó–∞–ø–∏—Å—ã–≤–∞—é, {phone}. –í–µ—Ä–Ω–æ?',
                         reply_markup=keyboard_confirm_phone())


@router.callback_query(F.data == 'getphone_back')
async def process_getphone_back(callback: CallbackQuery, state: FSMContext) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    logging.info(f'process_getphone_back: {callback.message.chat.id}')
    await callback.message.answer(text=f'–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚òéÔ∏è',
                                  reply_markup=keyboards_get_contact())
    await state.set_state(UserAnketa.phone)


@router.callback_query(F.data == 'confirm_phone')
async def process_confirm_phone(callback: CallbackQuery, state: FSMContext, bot: Bot) -> None:
    """–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–∞"""
    logging.info(f'process_confirm_phone: {callback.message.chat.id}')
    await callback.message.answer(text=f'–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?',
                                  reply_markup=ReplyKeyboardRemove())
    await state.set_state(UserAnketa.city)


@router.message(F.text, StateFilter(UserAnketa.city))
async def get_city(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–º–µ—Ä–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã"""
    logging.info(f'get_city: {message.chat.id}')
    await state.update_data(city=message.text)
    await message.answer(text=f'–ü—Ä–∏—à–ª–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª. –ø–æ—á—Ç—ã')
    await state.set_state(UserAnketa.email)


@router.message(F.text, StateFilter(UserAnketa.email))
async def make_anketa_(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    logging.info(f'make_anketa_: {message.from_user.id}')
    await state.update_data(email=message.text)
    await message.answer(text=f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è, '
                              f'–≤ —Å–ª—É—á–∞–µ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É.\n\n'
                              f'–¢–∞–∫–∂–µ, –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∏ –ø–æ–ª—É—á–∞—Ç—å TON –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö'
                              f' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n\n'
                              f'/cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã',
                         reply_markup=pass_the_state())
    await state.set_state(UserAnketa.address)


@router.callback_query(F.data == 'create_wallet')
async def create_wallet(callback: CallbackQuery, state: FSMContext):
    """–í–∏–¥–µ–æ-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–æ—à–µ–ª—å–∫–∞"""
    logging.info(f'create_wallet: {callback.message.from_user.id}')
    await callback.message.answer_video(video='BAACAgIAAxkBAAIG-mZ1D3n8x06fBosGaw290DPk6R91AAJlRwACuTmwS3Ys7U1g_Pa3NQQ',
                                        caption='–°–æ–∑–¥–∞–π—Ç–µ –∫–æ—à–µ–ª–µ–∫ –ø–æ –≤–∏–¥–µ–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
    await asyncio.sleep(5)
    await make_anketa_(message=callback.message, state=state)


@router.callback_query(F.data == 'pass_wallet')
async def pass_state(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞. –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"""
    logging.info(f'pass_state: {callback.message.from_user.id}')
    await callback.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É (–Ω–æ–º–µ—Ä) –≤–∞–∫–∞–Ω—Å–∏–∏. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–µ –≤ –¢–µ–ª–µ–≥—Ä–∞–º - '
                                  '–∫–∞–Ω–∞–ª–µ @shoptalkrn',
                                  reply_markup=keyboard_cancel())
    await state.set_state(UserAnketa.Anketa)


@router.message(UserAnketa.address)
async def confirm_address(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞. –° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å"""
    logging.info(f'confirm_address: {message.from_user.id}')
    await state.update_data(address=message.text)
    if await check_valid_addr(message.text):
        link_wallet_test = f"https: // testnet.tonviewer.com / {message.text}"
        link_wallet = f"https://tonviewer.com/{message.text}"
        await message.answer(text=f'–í–∞—à –∫–æ—à–µ–ª–µ–∫: <a href="{link_wallet}">{message.text}</a>\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?',
                             parse_mode='html',
                             reply_markup=yes_or_no_addr(),
                             link_preview_options=LinkPreviewOptions(is_disabled=True))
    else:
        await message.answer(text=f'–î–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –≤–∞–ª–∏–¥–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ä–∞–∑.',
                             reply_markup=keyboard_cancel())


@router.callback_query(F.data.startswith('address_'))
async def confirm_addres_yes_or_no(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∫–æ—à–µ–ª—å–∫–∞"""
    logging.info(f'confirm_addres_y_n: {callback.from_user.id}')
    data = await state.get_data()
    answer = callback.data.split('_')
    if answer[1] == "confirm":
        await update_user_ton_addr(callback.from_user.id, data['address'])
        await callback.message.answer(text=f'–í–∞—à –∫–æ—à–µ–ª–µ–∫ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω!',
                                      reply_markup=keyboards_main())
        await callback.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π –∏–∑ –∫–∞–Ω–∞–ª–∞ @shoptalkrn',
                                      reply_markup=keyboard_cancel())
        await state.set_state(UserAnketa.Anketa)
    else:
        await callback.message.answer(text=f'–í–∞—à –∫–æ—à–µ–ª–µ–∫ –Ω–µ –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ —Å–Ω–æ–≤–∞!',
                                      reply_markup=keyboards_main())
        await state.set_state(UserAnketa.address)


@router.message(UserAnketa.Anketa)
async def get_anketa(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π"""
    logging.info(f'get_anketa: {message.from_user.id}')
    await state.update_data(anketa=message.text)
    await state.set_state(default_state)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é –ø–æ –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏', reply_markup=keyboard_vacancy())


@router.callback_query(F.data.startswith("vacancy_"))
async def confirm_anketa(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏"""
    logging.info(f'confirm_anketa: {callback.message.from_user.id}')
    vacancy = callback.data.split('_')[1]
    await state.update_data(vacancy=vacancy)
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É?', reply_markup=yes_or_no())
    await callback.answer()


@router.callback_query(F.data.startswith("linkanketa"))
async def confirm_anketa(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–∫–µ—Ç—ã"""
    logging.info(f'confirm_anketa: {callback.message.from_user.id}')
    # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–æ–ª—É—á–∏–ª–∏ –∞–ø–¥–µ–π—Ç
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    # –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback.data
    answer = callback.data.split('_')[1]
    # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    if answer == 'confirm':
        # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º —á—Ç–æ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
        msg = await callback.message.answer('–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∫–µ—Ç—ã...')
        # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏–∑ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—ã
        id_anketa = len(get_list_all_anketa())
        # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await state.update_data(id_anketa=id_anketa)
        # –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_dict[callback.message.chat.id] = await state.get_data()
        # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        anketa = user_dict[callback.message.chat.id]['anketa']
        name = user_dict[callback.message.chat.id]['name']
        phone = user_dict[callback.message.chat.id]['phone']
        city = user_dict[callback.message.chat.id]['city']
        vacancy = user_dict[callback.message.chat.id]['vacancy']
        email = user_dict[callback.message.chat.id]['email']
        # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –ë–î –ø–æ –µ–≥–æ id —Ç–µ–ª–µ–≥—Ä–∞–º
        user = await get_user_from_id(user_id=callback.message.chat.id)
        # –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä
        if user.referer_id != 0:
            # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—Ñ–µ—Ä–µ—Ä–µ –ø–æ –µ–≥–æ id —Ç–µ–ª–µ–≥—Ä–∞–º
            referer = await get_user_from_id(user_id=user.referer_id)
            id_telegram_referer = user.referer_id
            username_referer = referer.username
        # –µ—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –Ω–µ—Ç
        else:
            id_telegram_referer = 0
            username_referer = 'none'
        date_today = datetime.today().strftime('%d/%m/%Y')
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü—É
        append_anketa(id_anketa=id_anketa,
                      id_telegram_refer=callback.message.chat.id,
                      username_refer=callback.from_user.username,
                      id_telegram_referer=id_telegram_referer,
                      username_referer=username_referer,
                      name=name,
                      phone=phone,
                      city=city,
                      email=email,
                      link_post=anketa,
                      status="‚ö†Ô∏è",
                      vacancy=vacancy,
                      date_anketa=date_today)
        # –ø–∞—É–∑–∞ 3 —Å–µ–∫
        await asyncio.sleep(3)
        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è
        await bot.delete_message(chat_id=callback.message.chat.id,
                                 message_id=msg.message_id)
        await callback.answer(text='–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!',
                              show_alert=True)
        await callback.message.answer(text='–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ TON –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü –ø–æ—Å–ª–µ –≤—ã—Ö–æ–¥–∞ –Ω–∞ —Ä–∞–±–æ—Ç—É. \n\n'
                                           '–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π –∏ –ø–æ–ª—É—á–∞—Ç—å TON –∑–∞'
                                           ' –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
        await callback.message.answer(text='–î–ª—è –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è TON –ø–æ—Å–ª–µ –º–µ—Å—è—Ü–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É'
                                           ' "–•–æ—á—É TON"',
                                      reply_markup=on_work(id_anketa=id_anketa))
        await state.set_state(default_state)
    else:
        await callback.message.answer(text='–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∞–Ω–∫–µ—Ç—ã',
                                      reply_markup=keyboards_main())
        await state.set_state(default_state)
    await callback.answer()


@router.callback_query(F.data.startswith('wishton_'))
async def want_ton(callback: CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ TON. –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
    """
    # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.answer(text='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–º –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ'
                               ' –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ. –°–ø–∞—Å–∏–±–æ!',
                          show_alert=True)
    # —É–¥–∞–ª—è–µ–º —É –Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    # –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞—Ä—è
    user_dict[callback.message.chat.id] = await state.get_data()
    # –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
    anketa = user_dict[callback.message.chat.id]['anketa']
    # –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—ã
    id_anketa = user_dict[callback.message.chat.id]['id_anketa']
    info_anketa = get_list_anketa(id_anketa=id_anketa)
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–∞–∫–∞–Ω—Å–∏–∏
    vacancy = ''
    amount = 0
    if info_anketa[10] == 'merchandiser':
        vacancy = '#–º–µ—Ä—á–∞–Ω–¥–∞–π–∑–µ—Ä'
        amount = 2000
    elif info_anketa[10] == 'mysteryShopper':
        vacancy = '#—Ç–∞–π–Ω—ã–π–ø–æ–∫—É–ø–∞—Ç–µ–ª—å'
        amount = 1000
    elif info_anketa[10] == 'consultant':
        vacancy = '#–ø—Ä–æ–¥–∞–≤–µ—Ü–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'
        amount = 5000
    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 'on_work
    await update_status(callback.from_user.id, UserStatus.on_work)
    # –ø—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å–ø–∏—Å–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    for admin_id in config.tg_bot.admin_ids.split(','):
        try:
            # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ —Ç–æ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
            await bot.send_message(chat_id=int(admin_id),
                                   text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{callback.from_user.username if callback.from_user.username else f"None-{callback.from_user.id}"}, –æ—Ç–∫–ª–∏–∫–Ω—É–≤—à–∏–π—Å—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é:\n'
                                        f' {anketa} - {vacancy},'
                                        f' –≤—ã—à–µ–ª –Ω–∞ —Ä–∞–±–æ—Ç—É.\n'
                                        f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —ç—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –≤ –≥—É–≥–ª —Ç–∞–±–ª–∏—Ü–µ —Å—Ç—Ä–æ–∫–∞ ‚Ññ {id_anketa}')
            await bot.send_message(chat_id=int(admin_id),
                                   text=f'–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{callback.from_user.username if callback.from_user.username else f"None-{callback.from_user.id}"} '
                                        f'{amount / 2} —Ä—É–±.',
                                   reply_markup=confirm(user_id=callback.message.chat.id, vacancy=info_anketa[10]))
        except:
            pass
    await state.set_state(default_state)
    await callback.answer()


@router.callback_query(F.data.startswith('confirm_pay_'))
async def transfer_pay_to(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """
    –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ TON –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ
    """
    logging.info(f'transfer_pay_to: {callback.data.split("_")[-1]}')
    # deleting the message from which update was called
    await bot.delete_message(chat_id=callback.message.chat.id,
                             message_id=callback.message.message_id)
    # we get the telegram id of the user who requested the TON charge from callback.data
    user_to_pay = int(callback.data.split('_')[-1])
    vacancy = callback.data.split('_')[-1]
    # changing the status in the status cell for the user on '‚úÖ'
    update_status_anketa(status='‚úÖ', telegram_id=user_to_pay)
    # we get the wallet address for charging TON
    user_ton_addr = await get_user_ton_addr_by_id(user_to_pay)
    try:
        # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ id —Ç–µ–ª–µ–≥—Ä–∞–º
        user = await get_user_from_id(user_to_pay)
        # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –µ–≥–æ –Ω–µ —Ä–∞–≤–µ–Ω "payed"
        if user.status != UserStatus.payed:
            amount = 0
            # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—É–±–ª–µ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
            if vacancy == 'merchandiser':
                amount = 2000
            elif vacancy == 'mysteryShopper':
                amount = 1000
            elif vacancy == 'consultant':
                amount = 5000
            # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ TON –ø–æ –∫—É—Ä—Å—É
            amount_ton = await get_ton_in_rub(amount=amount)
            # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—á–∏—Å–ª—è–µ–º 50% –æ—Ç —Å—É–º–º—ã
            amount_user_ton = amount_ton / 2
            # –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
            transaction = await TonWallet.transfer(amount=amount_user_ton,
                                                   to_addr=user_ton_addr)
            # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ 'ok'
            if transaction == 'ok':
                # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await increase_ton_balance(tg_id=user_to_pay, s=amount_user_ton)
                # –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü–µ
                update_status_anketa(status='üí∞', telegram_id=user_to_pay)
                # –∏–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                await update_status(user_to_pay, UserStatus.payed)
                # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∞ –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
                await callback.message.answer(
                    f'‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{await _get_username_from_id(user_to_pay)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <strong>{amount_user_ton} TON</strong>',
                    parse_mode='html')
                try:
                    # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –µ–º—É –Ω–∞—á–∏—Å–ª–µ–Ω–æ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ
                    await bot.send_message(chat_id=user_to_pay,
                                           text=f'–í–∞–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {amount_user_ton} TON\n\n'
                                                f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∫–æ—à–µ–ª–µ–∫'
                                                f' <a href="https://tonscan.org/address/{user_ton_addr}">–∫–æ—à–µ–ª–µ–∫.</a>',
                                           parse_mode='html',
                                           link_preview_options=LinkPreviewOptions(is_disabled=True))
                except:
                    pass
            # –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥
            elif transaction == 'not enough money':
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                for admin_id in config.tg_bot.admin_ids.split(','):
                    try:
                        await bot.send_message(chat_id=int(admin_id),
                                               text=f'‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
                                                    f' @{await _get_username_from_id(user_to_pay)} –Ω–µ –ø—Ä–∏—à–ª–æ {amount_user_ton} TON,'
                                                    f' –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—à–µ–ª–µ–∫, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–∞–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
                    except:
                        pass
            # –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞
            elif transaction.startswith('error'):
                # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                for admin_id in config.tg_bot.admin_ids.split(','):
                    try:
                        await bot.send_message(chat_id=int(admin_id),
                                               text=f'‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
                                                    f' @{await _get_username_from_id(user_to_pay)} –Ω–µ –ø—Ä–∏—à–ª–æ {amount_user_ton} TON,'
                                                    f' —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤!')
                    except:
                        pass
            # –ø–æ–ª—É—á–∞–µ–º id —Ç–µ–ª–µ–≥—Ä–∞–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            referer = user.referer_id
            # –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if referer:
                # –Ω–∞—á–∏—Å–ª—è–µ–º 100% –æ—Ç —Å—É–º–º—ã
                transaction = await TonWallet.transfer(amount=amount_ton,
                                                       to_addr=user_ton_addr)
                # –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª
                if transaction == 'ok':
                    # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
                    await increase_ton_balance(tg_id=user_to_pay, s=amount_ton)
                    # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –æ –≤–æ–∑–Ω–∞–≥—Ä–æ–∂–¥–µ–Ω–∏–∏
                    await bot.send_message(chat_id=referer,
                                           text=f'–í–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ <strong>{amount_ton} TON</strong> –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
                                                f' @{await _get_username_from_id(user_to_pay)}',
                                           parse_mode='html')
                elif transaction == 'not enough money':
                    for admin_id in config.tg_bot.admin_ids.split(','):
                        try:
                            await bot.send_message(chat_id=int(admin_id),
                                                   text=f'‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{await _get_username_from_id(referer)}'
                                                        f' –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ @{await _get_username_from_id(user_to_pay)} –Ω–µ –ø—Ä–∏—à–ª–æ {amount_ton} TON,'
                                                        f' –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—à–µ–ª–µ–∫, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —Ç–∞–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!')
                        except:
                            pass
                elif transaction.startswith('error'):
                    for admin_id in config.tg_bot.admin_ids.split(','):
                        try:
                            await bot.send_message(chat_id=int(admin_id),
                                                   text=f'‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é'
                                                        f' @{await _get_username_from_id(user_to_pay)} –Ω–µ –ø—Ä–∏—à–ª–æ {amount_ton} TON,'
                                                        f' —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤!')
                        except:
                            pass
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∞–ª –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –ø–æ —ç—Ç–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        else:
            await callback.answer(text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ!',
                                  show_alert=True)
    except Exception as e:
        logging.error(f'ERROR: {e}')
    await callback.answer()


@router.callback_query(F.data.startswith('cancel_pay_'))
async def cancel_pay(callback: CallbackQuery, bot: Bot, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
    """
    logging.info(f'cancel_pay: {callback.data.split("_")[-1]}')
    await callback.answer()
    # id —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ TON
    user_to_pay = int(callback.data.split('_')[-1])
    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await update_status(user_to_pay, UserStatus.not_payed)
    # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∞
    await callback.message.answer(text=f'‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{await _get_username_from_id(user_to_pay)} –æ–ø–ª–∞—Ç–∞'
                                       f' –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞',
                                  parse_mode='html')
    try:
        # –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(chat_id=user_to_pay,
                               text='–û–ø–ª–∞—Ç–∞ –±—ã–ª–∞ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π')
    except:
        pass
    # –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–Ω–∫–µ—Ç—ã –≤ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü–µ
    update_status_anketa(status='‚ùå', telegram_id=user_to_pay)
